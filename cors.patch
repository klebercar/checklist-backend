*** Begin Patch
*** Add File: src/main/java/com/hotel/checklist/config/CorsConfig.java
+package com.hotel.checklist.config;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * Configuração de CORS para expor a API ao frontend.
+ * As origens permitidas vêm de APP_CORS_ALLOWED_ORIGINS (CSV),
+ * com fallback definido em application.yml (dev).
+ */
+@Configuration
+public class CorsConfig {
+
+    @Value("${app.cors.allowed-origins:*}")
+    private String allowedOriginsCsv;
+
+    @Bean
+    public CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration cors = new CorsConfiguration();
+
+        // aceita CSV: "http://localhost:5173,https://meu-front.com"
+        List<String> origins = Arrays.stream(allowedOriginsCsv.split(","))
+                .map(String::trim)
+                .filter(s -> !s.isBlank())
+                .collect(Collectors.toList());
+
+        // Usar patterns permite curingas, caso necessário.
+        cors.setAllowedOriginPatterns(origins.isEmpty() ? List.of("*") : origins);
+        cors.setAllowedMethods(List.of("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
+        cors.setAllowedHeaders(List.of("Authorization", "Content-Type", "Accept", "Origin", "X-Requested-With"));
+        cors.setExposedHeaders(List.of("Authorization", "Content-Disposition"));
+        cors.setAllowCredentials(false);
+
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", cors);
+        return source;
+    }
+}
+
*** End Patch
*** Begin Patch
*** Update File: src/main/java/com/hotel/checklist/config/SecurityConfig.java
@@
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.Customizer;
@@
     protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
-        http
-            .csrf(csrf -> csrf.disable())
-            .authorizeHttpRequests(auth -> auth
+        http
+            .csrf(csrf -> csrf.disable())
+            // Habilita CORS; a política é definida pelo CorsConfigurationSource (CorsConfig)
+            .cors(Customizer.withDefaults())
+            .authorizeHttpRequests(auth -> auth
                 // deixe aqui seus whitelists (/auth/**, swagger, etc.)
                 .requestMatchers(SWAGGER_WHITELIST).permitAll()
                 .requestMatchers("/auth/**").permitAll()
                 .anyRequest().authenticated()
             );
 
         // restante da sua configuração (JWT filter, sessionManagement, etc.)
         return http.build();
     }
*** End Patch
*** Begin Patch
*** Update File: src/main/resources/application.yml
@@
 app:
   jwt:
     secret: ${JWT_SECRET}
     expirationMs: 86400000
   storage:
     supabase:
       url: ${SUPABASE_URL}
       key: ${SUPABASE_SERVICE_KEY}
       bucket: ${SUPABASE_BUCKET}
+  cors:
+    # Lista CSV de origens permitidas. Em produção, defina APP_CORS_ALLOWED_ORIGINS
+    # no provedor (Render). Ex.: "https://SEU-FRONT-PROD.com,http://localhost:5173"
+    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:5173}
 
 logging:
   level:
     root: INFO
     org.springframework.security: INFO
*** End Patch
